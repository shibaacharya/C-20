#include <iostream>
#include <string.h>
using namespace std;
template<class T>
class AUTO_PTR {
public:
  explicit AUTO_PTR(T *p = 0): m_AutoPtr(p) {}
  template<class U>
  AUTO_PTR(AUTO_PTR<U>& rhs): m_AutoPtr(rhs.release()) {}
  ~AUTO_PTR() { delete m_AutoPtr; }
  template<class U>
  AUTO_PTR<T>& operator=(AUTO_PTR<U>& rhs)
  {
    if (this != &rhs) reset(rhs.release());
    return *this;
  }
  T& operator*() const { return *m_AutoPtr; }
  T* operator->() const { return m_AutoPtr; }
  T* get() const { return m_AutoPtr; }
  T* release()
  {
    T *oldPointee = m_AutoPtr;
    m_AutoPtr = 0;
    return oldPointee;
  }
  void reset(T *p = 0)
  {
    if (m_AutoPtr != p) {
      delete m_AutoPtr;
      m_AutoPtr = p;
    }
  }
  private:
    T *m_AutoPtr;
};
class MyClass
{
public:
    MyClass() //ctor
    {
        str = new char[255];
        cout << "Memory Allocated" << endl;
    }
    ~MyClass()
    {
        delete[] str;
        cout << "Memory deallocated" << endl;
    }
    void display()
    {
        strcpy(str, "This is test");
        cout << str << endl;
    }
private:
    char *str;
   
};
int main()
{
    AUTO_PTR<MyClass> b = AUTO_PTR<MyClass> (new MyClass);
    b.get()->display();
    AUTO_PTR<MyClass> c = b;
    if(b.get())
        cout << "valid" << endl;
   
    return 0;
}
